import re

def generate_sorted_sql_query(table_name, input_text, target_cols):
    """
    根据输入的表内容生成格式化的SQL查询，WHERE条件按目标列排序
    
    参数:
    table_name (str): 数据库表名
    input_text (str): 表内容文本
    target_cols (list): 用于WHERE条件的目标列名列表
    
    返回:
    str: 格式化的SQL查询语句
    """
    # 分割文本行并移除空行
    lines = [line.strip() for line in input_text.split('\n') if line.strip()]
    
    if not lines:
        return f"SELECT * FROM {table_name} /* No data provided */"
    
    # 提取列名
    columns = re.split(r'\s+', lines[0].strip())
    
    # 处理数据行
    data_rows = []
    for line in lines[1:]:
        if not line.strip() or line.isspace():
            continue
        row_data = re.split(r'\s+', line.strip())
        if len(row_data) >= len(columns):  # 确保行数据完整
            data_rows.append(row_data)
    
    # 验证目标列是否存在
    for col in target_cols:
        if col not in columns:
            raise ValueError(f"目标列 '{col}' 不在表列中")
    
    # 获取目标列的索引
    col_indices = [columns.index(col) for col in target_cols]
    
    # 收集唯一组合值并按照目标列排序
    unique_combinations = []
    for row in data_rows:
        combination = tuple(row[i] for i in col_indices)
        
        # 创建排序键：尝试数值转换，失败则使用原始值
        sort_keys = []
        for value in combination:
            try:
                sort_keys.append(int(value))
            except ValueError:
                try:
                    sort_keys.append(float(value))
                except ValueError:
                    sort_keys.append(value)
        
        unique_combinations.append((tuple(sort_keys), combination))
    
    # 去重并排序
    sorted_combinations = sorted(set(unique_combinations), key=lambda x: x[0])
    sorted_values = [item[1] for item in sorted_combinations]
    
    # 格式化SELECT子句 - 每列单独一行
    select_clause = ",\n    ".join(columns)
    
    # 格式化WHERE子句 - 每行一个元组值
    where_values = []
    for tup in sorted_values:
        quoted_values = [f"'{value}'" for value in tup]
        where_values.append(f"    ({', '.join(quoted_values)})")
    
    # 构建格式化的SQL查询
    sql = f"""SELECT
    {select_clause}
FROM {table_name}
WHERE ({', '.join(target_cols)}) IN (
{',\n'.join(where_values)}
)"""
    
    return sql

input_text = """
scheme_code	account_type	employer_account_code	member_account_code	regular_rebate_applicable	annual_rebate_applicable	regular_rebate_distribution_subacct	regular_rebate_distribution_fund	regular_rebate_calculation_option	regular_rebate_allow_rollover	annual_rebate_allow_rollover	record_creation_datetime	record_created_by	record_last_update_datetime	record_last_updated_by	delete_flag
						Default Benefits / Source Benefits	As per Investment Mandate / As per Original Fund								
															
RB	TVC	3100001	8000001	Y	N	Default Benefits	As per Investment Mandate	NAV			20250801 23:59:59	SYSTEM	20250801 23:59:59	SYSTEM	N
															
															
RB	SVC	3100002	8000002	Y	N	Default Benefits	As per Investment Mandate	NAV			20250802 23:59:59	SYSTEM	20250802 23:59:59	SYSTEM	N
															
															
RB	PAH	3100003	8000003	Y	N	Default Benefits	As per Investment Mandate	NAV			20250801 23:59:59	SYSTEM	20250801 23:59:59	SYSTEM	N
															
															
RB	REE	3100004	8000004	Y	N	Default Benefits	As per Investment Mandate	NAV			20250801 23:59:59	SYSTEM	20250801 23:59:59	SYSTEM	N
															
															
RB	CEE	3100005	8000005	Y	N	Default Benefits	As per Investment Mandate	NAV			20250801 23:59:59	SYSTEM	20250801 23:59:59	SYSTEM	N
															
															
															
RB	SEP	3100006	8000006	Y	N	Default Benefits	As per Investment Mandate	NAV			20250801 23:59:59	SYSTEM	20250801 23:59:59	SYSTEM	N
															
															
RB	TVC	3100007	8000007	Y	N	Default Benefits	As per Investment Mandate	NAV			20250701 23:59:59	SYSTEM	20250701 23:59:59	SYSTEM	N
RB	TVC	3100008	8000008	Y	N	Default Benefits	As per Investment Mandate	NAV			20250701 23:59:59	SYSTEM	20250701 23:59:59	SYSTEM	N
RB	SVC	3100021	8000021	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
RB	SVC	3100022	8000022	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
															
RB	TVC	3100023	8000023	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
RB	TVC	3100024	8000024	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
RB	TVC	3100036	8000036	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
RB	TVC	3100037	8000037	N	N						20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
RB	TVC	3100038	8000038	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
															
RB	TVC	3100039	8000039	Y	N	Default Benefits	As per Investment Mandate	NAV			20250101 23:59:59	SYSTEM	20250101 23:59:59	SYSTEM	N
"""

# 定义参数
table_name = "ra_rebate_details_account"
target_columns = ["employer_account_code"]

# 生成SQL
sql_query = generate_sorted_sql_query(table_name, input_text, target_columns)
print(sql_query)

# 生产结果：
SELECT
    scheme_code,
    account_type,
    employer_account_code,
    member_account_code,
    regular_rebate_applicable,
    annual_rebate_applicable,
    regular_rebate_distribution_subacct,
    regular_rebate_distribution_fund,
    regular_rebate_calculation_option,
    regular_rebate_allow_rollover,
    annual_rebate_allow_rollover,
    record_creation_datetime,
    record_created_by,
    record_last_update_datetime,
    record_last_updated_by,
    delete_flag
FROM ra_rebate_details_account
WHERE (employer_account_code) IN (
    ('3100001'),
    ('3100002'),
    ('3100003'),
    ('3100004'),
    ('3100005'),
    ('3100006'),
    ('3100007'),
    ('3100008'),
    ('3100021'),
    ('3100022'),
    ('3100023'),
    ('3100024'),
    ('3100036'),
    ('3100038'),
    ('3100039')
)
