import csv
import re
from io import StringIO

def generate_sql_with_explicit_nulls(table_name, input_text, where_cols):
    """
    构建 SQL：SELECT 所有字段；WHERE 仅使用指定列，并自动将 NULL 拆为 IS NULL。

    参数:
    - table_name (str): SQL 表名
    - input_text (str): 粘贴数据（含列头）
    - where_cols (list[str]): 用于 WHERE 的列名

    返回:
    - str: 完整 SQL 查询语句
    """
    input_text = input_text.strip().replace('\xa0', ' ')
    input_text = '\n'.join([
        re.sub(r' {2,}', '\t', line.strip())
        for line in input_text.strip().splitlines()
    ])

    reader = csv.reader(StringIO(input_text), delimiter='\t')
    rows = list(reader)
    if not rows:
        return "-- No data provided"

    all_columns = [col.strip() for col in rows[0]]
    data_rows = rows[1:]

    # 校验列存在性
    missing = [col for col in where_cols if col not in all_columns]
    if missing:
        return f"-- Error: These WHERE columns are missing from data: {missing}"

    where_indices = [all_columns.index(col) for col in where_cols]

    # 清洗有效行
    valid_rows = []
    for row in data_rows:
        if len(row) < len(all_columns):
            row += [''] * (len(all_columns) - len(row))
        row = row[:len(all_columns)]
        if all(cell.strip() == '' for cell in row):
            continue
        valid_rows.append([cell.strip() for cell in row])

    # 构造 WHERE 条件（每行转成一个 AND 表达式）
    where_clauses = []
    for row in valid_rows:
        clause_parts = []
        for idx, col in zip(where_indices, where_cols):
            val = row[idx].strip()
            if val == '':
                clause_parts.append(f"{col} IS NULL")
            else:
                clause_parts.append(f"{col} = '{val}'")
        where_clauses.append("    (" + " AND ".join(clause_parts) + ")")

    # 构建最终 SQL
    select_clause = ",\n    ".join(all_columns)
    if where_clauses:
        where_block = "\nOR\n".join(where_clauses)
        where_clause = f"(\n{where_block}\n)"
    else:
        where_clause = "1 = 0  -- no valid conditions"

    sql = f"""SELECT
    {select_clause}
FROM {table_name}
WHERE {where_clause};
"""
    return sql


# 使用示例 1：只使用默认字段
input_text = """
scheme_code	account_type	employer_account_code	member_account_code	regular_rebate_applicable	annual_rebate_applicable	regular_rebate_distribution_subacct	regular_rebate_distribution_fund	regular_rebate_calculation_option	regular_rebate_allow_rollover	annual_rebate_allow_rollover	source_employer_code	record_creation_datetime	record_created_by	record_last_update_datetime	record_last_updated_by	delete_flag
RB	ER	20000100		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	ER	20000101		N	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	ER	20000102		Y	Y	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
																
RB	ER	20000103		Y	Y	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	N		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
																
RB	ER	20000104		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100014	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000105		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100015	N	Y	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000106		N	Y	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100016	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000107		Y	Y	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	PAH		200100017	Y	Y	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	ER	20000108		Y	Y	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	PAH		200100018	Y	Y	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000109		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100019	Y	Y	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	ER	20000110		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100020	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000111		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100021	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
RB	ER	20000112		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100022	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
																
																
RB	ER	20000113		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	PAH		200100023	Y	N	Default Benefits	As per Investment Mandate	NAV				2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
RB	ER	20000114		Y	N	Default Benefits	As per Investment Mandate	NAV	Y (5 years)	Y		2025-01-01 00:00:00	SYSTEM	2025-01-01 00:00:00	SYSTEM	N
"""


sql = generate_sql_with_explicit_nulls(
    "ra_rebate_details_funds",
    input_text,
    where_cols=["employer_account_code", "member_account_code"]
)
print(SQL)


## Search after rollover:
import pandas as pd
from io import StringIO

def generate_sql_in_query_from_text(raw_text: str, table_name: str) -> str:
    """
    从 Excel 粘贴的文本中提取 employer_account_code 和 member_account_code，
    自动去除.0浮点，生成格式化的单条 SQL 查询，使用 IN (...) 一次性查询所有匹配记录。
    SELECT 使用输入数据的全量列名，输出语句带 SQL 标准缩进。
    """

    def format_id(value):
        if pd.isna(value):
            return None
        if isinstance(value, float) and value.is_integer():
            return str(int(value))
        return str(value).strip()

    # 读取复制的 Excel 文本
    df = pd.read_csv(StringIO(raw_text), sep='\t')

    # 构造 SELECT 字段列表
    column_list = df.columns.tolist()
    select_clause = ",\n    ".join(column_list)

    # 收集 ID
    employer_ids = set()
    member_ids = set()

    for _, row in df.iterrows():
        emp_id = format_id(row.get("employer_account_code"))
        mem_id = format_id(row.get("member_account_code"))
        if emp_id:
            employer_ids.add(emp_id)
        if mem_id:
            member_ids.add(mem_id)

    # 构造 WHERE 子句
    emp_part = ""
    mem_part = ""
    
    if employer_ids:
        emp_values = "', '".join(sorted(employer_ids))
        emp_part = f"employer_account_code IN (\n        '{emp_values}'\n    )"
    if member_ids:
        mem_values = "', '".join(sorted(member_ids))
        mem_part = f"member_account_code IN (\n        '{mem_values}'\n    )"

    if emp_part and mem_part:
        where_clause = f"WHERE {emp_part}\n    OR {mem_part}"
    elif emp_part:
        where_clause = f"WHERE {emp_part}"
    elif mem_part:
        where_clause = f"WHERE {mem_part}"
    else:
        return "-- No valid employer or member account codes found."

    # 拼接完整 SQL
    sql = f"""SELECT
    {select_clause}
FROM {table_name}
{where_clause};
"""
    return sql




## Update 2025-07-08
import re
import datetime
from typing import List, Dict, Optional, Set, Tuple

def _quote_string(value: str) -> str:
    """
    将字符串值格式化为SQL字符串（带引号），处理转义
    """
    value = value.strip()
    if value == "" or value.upper() == "NULL":
        return "NULL"
    return "'" + value.replace("'", "''") + "'"

def generate_select_sql(
    table_name: str,
    raw_text: str,
    primary_column: str,
    secondary_column: Optional[str] = None
) -> str:
    """
    生成SELECT SQL语句
    
    参数:
    table_name: 数据库表名
    raw_text: 包含表头和数据的文本（空格或制表符分隔）
    primary_column: WHERE条件的主列名（必须存在）
    secondary_column: 可选的次列名（用于OR连接）
    
    返回:
    str: 格式化的SELECT SQL语句
    """
    raw_text = raw_text.strip()
    if not raw_text:
        raise ValueError("raw_text 为空，可能没有正确复制数据")

    # 拆行 + 去除空行
    lines = [line.strip() for line in raw_text.splitlines() if line.strip()]
    if not lines:
        raise ValueError("未检测到有效数据")

    # 解析列名 - 使用空白字符分割
    base_cols = [col.strip() for col in re.split(r'\s+', lines[0]) if col.strip()]
    if not base_cols:
        raise ValueError("未检测到列名行")
    
    # 检查主列名是否存在
    if primary_column not in base_cols:
        available_cols = ", ".join(base_cols)
        raise ValueError(f"主列名 '{primary_column}' 不存在于数据列中。可用列: {available_cols}")

    # 检查次列名是否存在（如果提供了）
    if secondary_column and secondary_column not in base_cols:
        available_cols = ", ".join(base_cols)
        raise ValueError(f"次列名 '{secondary_column}' 不存在于数据列中。可用列: {available_cols}")

    # 获取列索引
    primary_idx = base_cols.index(primary_column)
    secondary_idx = base_cols.index(secondary_column) if secondary_column else -1

    # 处理数据行
    data_rows = []
    for line in lines[1:]:
        if not line.strip():
            continue
            
        # 使用空白字符分割
        cells = [cell.strip() for cell in re.split(r'\s+', line) if cell.strip()]
        
        # 确保单元格数量与列头匹配
        if len(cells) < len(base_cols):
            # 填充缺失的单元格
            cells.extend([''] * (len(base_cols) - len(cells)))
        elif len(cells) > len(base_cols):
            # 截断多余的单元格
            cells = cells[:len(base_cols)]
            
        data_rows.append(cells)

    if not data_rows:
        raise ValueError("没有可处理的数据行")

    # 收集主列和次列的去重值
    primary_values: Set[str] = set()
    secondary_values: Set[str] = set()
    
    for row in data_rows:
        if row[primary_idx]:
            primary_values.add(_quote_string(row[primary_idx]))
        
        if secondary_column and secondary_idx != -1 and row[secondary_idx]:
            secondary_values.add(_quote_string(row[secondary_idx]))

    # 构建WHERE条件
    def format_in_clause(values: Set[str]) -> str:
        sorted_values = sorted(values, key=lambda x: x.strip("'"))
        return ",\n        ".join(sorted_values)
    
    primary_in = format_in_clause(primary_values)
    
    # 构建完整SQL
    columns_str = ",\n    ".join(base_cols)
    
    sql = (
        f"SELECT\n    {columns_str}\n"
        f"FROM {table_name}\n"
        f"WHERE {primary_column} IN (\n        {primary_in}\n    )"
    )
    
    # 添加OR条件（如果提供了次列）
    if secondary_column and secondary_values:
        secondary_in = format_in_clause(secondary_values)
        sql += f"\n    OR {secondary_column} IN (\n        {secondary_in}\n    )"
    
    return sql + ";"

# 使用示例
sample = """
scheme_cd emplr_acct_cd payroll_group_id mbr_acct_cd acct_type sub_acct_type fund_cd unit_count eff_date record_effective_datetime record_created_by record_end_datetime record_last_updated_by delete_flag
RB 8800009 PG8800009 200100019 PAH FRMC SL65 40 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800009 PG8800009 200100019 PAH FRMC SLDCA 50 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800010 PG8800010 200100020 PAH FRMC SL65 70 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800011 PG8800011 200100021 PAH FRMC SLDCA 50 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800011 PG8800011 200100021 PAH FRMC SL65 30 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800012 PG8800012 200100022 PAH FRMC SL65 75 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800012 PG8800012 200100022 PAH FRMC SLDCA 50 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800013 PG8800013 200100023 PAH FRMC SL65 80 2025-03-01 20250101235959 SYSTEM 20250101235959 SYSTEM N
RB 8800009 PG8800009 200100019 PAH FRMC SL65 45 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800009 PG8800009 200100019 PAH FRMC SLDCA 50 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800010 PG8800010 200100020 PAH FRMC SL65 75 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800011 PG8800011 200100021 PAH FRMC SLDCA 50 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800011 PG8800011 200100021 PAH FRMC SL65 55 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800012 PG8800012 200100022 PAH FRMC SL65 65 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800012 PG8800012 200100022 PAH FRMC SLDCA 55 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
RB 8800013 PG8800013 200100023 PAH FRMC SL65 85 2025-04-01 20250201235959 SYSTEM 20250201235959 SYSTEM N
"""

# 生成SELECT语句
print(generate_select_sql(
    "TB_ACCOUNT_BALANCE", 
    sample, 
    "emplr_acct_cd", 
    "mbr_acct_cd"
))
