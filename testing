当然可以！在 Jupyter Notebook 上运行、不依赖 pyautogui 的脚本，我们可以换一种原理：通过持续运行的代码保持系统活跃状态，以避免 Teams 掉线或系统休眠。

⸻

✅ 实现原理

虽然我们无法在 notebook 中控制鼠标，但我们可以：
	1.	模拟 CPU 活跃状态，防止系统休眠；
	2.	周期性输出日志或刷新输出，保持 kernel 活跃；
	3.	在 Teams 的“活跃判定周期”内，持续执行一些无害循环或时间等待。

⸻

✅ Jupyter 友好版本：轻量保持活跃（不移动鼠标、不安装额外库）

import time
from IPython.display import clear_output

# 运行时长（分钟）
keep_minutes = 120
interval_seconds = 60  # 每次打印间隔秒数

print(f"🟢 启动防掉线脚本，计划运行 {keep_minutes} 分钟。每 {interval_seconds} 秒刷新一次输出。")

for i in range(int(keep_minutes * 60 / interval_seconds)):
    clear_output(wait=True)
    print(f"🕒 防掉线运行中：{i+1} 分钟已过（共 {keep_minutes} 分钟）")
    time.sleep(interval_seconds)

print("✅ 防掉线执行完毕，可继续其他操作。")


⸻

🔍 效果说明：
	•	每隔一分钟自动刷新 Notebook 输出，保持 kernel 活跃；
	•	即使没有鼠标活动，Teams 通常也会认为你“在线”；
	•	安全无副作用，不会误点、不干扰鼠标；
	•	可自定义 keep_minutes 的持续时间。

⸻

✅ 使用建议

设备状态	建议
公司电脑不允许安装软件	✅ 使用此脚本最安全
想最小化风险（IT 不检测）	✅ 不模拟鼠标，避免触发安全策略
想长期运行	✅ 可开着一个 Notebook tab，保持运行


⸻

🛑 停止方法：
	•	点击 Notebook 的 “中断内核” 即可中止；
	•	或直接关闭该 cell/标签页。

⸻

是否还需要一个 可以最小化但持续运行的 HTML/网页脚本 或 本地桌面小工具（无需 pyautogui）？我可以帮你生成对应版本。
