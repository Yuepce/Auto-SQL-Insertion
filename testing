WITH valid_balances AS (
  SELECT *
  FROM empf_ods.tb_account_balance bal
  WHERE
    bal.acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND bal.sub_acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND bal.record_last_updated_by <> 'INFORMATICA_DEL'
    AND bal.scheme_cd = 'RB'
)
SELECT
  pri.scheme_cd AS scheme_code,
  pri.fund_cd AS inv_fund,
  pri.efctv_date AS unit_price_dealing_date,
  SUM(bal.unit_count) AS total_unit,
  pri.bid_price_cnt AS unit_price,
  SUM(bal.unit_count * pri.bid_price_cnt) AS net_asset_value
FROM empf_ods.tb_fund_price pri
JOIN (
  SELECT *
  FROM (
    SELECT *,
      ROW_NUMBER() OVER (
        PARTITION BY sub_acct_type, fund_cd, mbr_acct_cd, pri_date
        ORDER BY eff_date DESC
      ) AS rn
    FROM (
      SELECT b.*, p.efctv_date AS pri_date
      FROM valid_balances b
      JOIN empf_ods.tb_fund_price p ON b.fund_cd = p.fund_cd AND b.eff_date <= p.efctv_date
      WHERE p.scheme_cd = 'RB' AND p.delete_flag = 'N'
    ) t
  ) x
  WHERE rn = 1
) bal ON pri.fund_cd = bal.fund_cd AND pri.efctv_date = bal.pri_date
WHERE pri.efctv_date BETWEEN '2025-04-07' AND '2025-04-13'
GROUP BY
  pri.scheme_cd,
  pri.fund_cd,
  pri.efctv_date,
  pri.bid_price_cnt
ORDER BY
  pri.fund_cd,
  pri.efctv_date DESC;


-- 🔍 调试参数：
-- 替换为你关注的 NAV 报表日期 & 基金代码
WITH nav_date_target AS (
  SELECT 
    DATE '2025-04-07' AS nav_date,   -- 👈 Replace with your target NAV date
    'CRCPF' AS target_fund           -- 👈 Replace with your fund code
),

-- 1️⃣ 找出该基金在该 NAV 日期下的有效基金价格记录（必须存在）
valid_fund_price AS (
  SELECT *
  FROM tb_fund_price f
  JOIN nav_date_target t
    ON f.efctv_date = t.nav_date AND f.fund_cd = t.target_fund
  WHERE f.scheme_cd = 'RB'
    AND f.delete_flag = 'N'
),

-- 2️⃣ 找出所有符合该 NAV 日期条件的账户余额记录（用于 unit 汇总）
valid_account_balance AS (
  SELECT 
    b.*,
    ROW_NUMBER() OVER (
      PARTITION BY b.sub_acct_type, b.fund_cd, b.mbr_acct_cd
      ORDER BY b.eff_date DESC
    ) AS rn
  FROM tb_account_balance b
  JOIN nav_date_target t
    ON b.fund_cd = t.target_fund
  JOIN valid_fund_price p
    ON b.fund_cd = p.fund_cd
  WHERE b.scheme_cd = 'RB'
    AND b.acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND b.sub_acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND b.record_last_updated_by <> 'INFORMATICA_DEL'
    AND b.eff_date <= p.efctv_date
)

-- 3️⃣ 最终输出所有被计入 total_unit 的记录
SELECT 
  b.mbr_acct_cd,
  b.fund_cd,
  b.eff_date,
  b.unit_count,
  b.acct_type,
  b.sub_acct_type,
  b.delete_flag,
  b.record_last_updated_by,
  p.efctv_date AS nav_date,
  p.bid_price_cnt AS unit_price,
  b.unit_count * p.bid_price_cnt AS partial_nav
FROM valid_account_balance b
JOIN valid_fund_price p
  ON b.fund_cd = p.fund_cd
WHERE b.rn = 1
ORDER BY b.eff_date DESC;





-- 1. 预过滤合法账户记录
WITH valid_balances AS (
  SELECT *
  FROM empf_ods.tb_account_balance bal
  WHERE
    bal.acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND bal.sub_acct_type NOT IN ('RESERVE', 'FORFEITURE')
    AND bal.record_last_updated_by <> 'INFORMATICA_DEL'
    AND bal.scheme_cd = 'RB'
    AND bal.delete_flag = 'N'
),

-- 2. 生成所有 NAV 日与合规账户记录的交叉组合（并限制 eff_date ≤ efctv_date）
balance_with_nav_date AS (
  SELECT
    b.*,
    p.efctv_date AS pri_date,
    p.bid_price_cnt
  FROM valid_balances b
  JOIN empf_ods.tb_fund_price p
    ON b.fund_cd = p.fund_cd
   AND b.eff_date <= p.efctv_date
  WHERE p.scheme_cd = 'RB'
    AND p.delete_flag = 'N'
),

-- 3. 每个 NAV 日 & 基金 & 账户组合选出最接近的一条记录（eff_date 最大）
latest_valid_balances AS (
  SELECT *
  FROM (
    SELECT *,
      ROW_NUMBER() OVER (
        PARTITION BY sub_acct_type, fund_cd, mbr_acct_cd, pri_date
        ORDER BY eff_date DESC
      ) AS rn
    FROM balance_with_nav_date
  ) ranked
  WHERE rn = 1
)

-- 4. 汇总生成 NAV 报表
SELECT
  p.scheme_cd AS scheme_code,
  p.fund_cd AS inv_fund,
  p.efctv_date AS unit_price_dealing_date,
  SUM(b.unit_count) AS total_unit,
  p.bid_price_cnt AS unit_price,
  SUM(b.unit_count * p.bid_price_cnt) AS net_asset_value
FROM empf_ods.tb_fund_price p
JOIN latest_valid_balances b
  ON p.fund_cd = b.fund_cd
 AND p.efctv_date = b.pri_date
WHERE p.scheme_cd = 'RB'
  AND p.delete_flag = 'N'
  AND p.efctv_date BETWEEN DATE '2025-04-07' AND DATE '2025-04-13'
GROUP BY
  p.scheme_cd,
  p.fund_cd,
  p.efctv_date,
  p.bid_price_cnt
ORDER BY
  p.fund_cd,
  p.efctv_date DESC;




