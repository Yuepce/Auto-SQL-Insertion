import re, datetime

def _fmt_cell(value: str, col_name: str) -> str:
    """
    把单元格文本转换为 SQL value。
    仅当列名含 'date' 或 'day' 时，才尝试把 8/14 位数字解析为日期 / 日期时间。
    """
    v = value.strip()
    if v == "" or v.upper() == "NULL":
        return "NULL"

    is_date_col = any(k in col_name.lower() for k in ("date", "day"))

    # ---------- 仅日期列做解析 ----------
    if is_date_col:
        if re.fullmatch(r"\d{8}", v):                      # YYYYMMDD
            return f"'{v[:4]}-{v[4:6]}-{v[6:]}'"
        if re.fullmatch(r"\d{14}", v):                     # YYYYMMDDhhmmss
            return f"'{v[:4]}-{v[4:6]}-{v[6:8]} {v[8:10]}:{v[10:12]}:{v[12:]}'"
        if re.fullmatch(r"\d{2}-[A-Za-z]{3}-\d{2}", v):    # 01-Oct-22
            dt = datetime.datetime.strptime(v, "%d-%b-%y")
            return f"'{dt:%Y-%m-%d}'"

    # ---------- 时间字符串 ----------
    if re.fullmatch(r"\d{1,2}:\d{2}", v):
        hh, mm = map(int, v.split(":"))
        return f"'{hh:02d}:{mm:02d}:00'"

    # ---------- 纯数字 ----------
    if re.fullmatch(r"-?\d+(\.\d+)?", v):
        return v

    # ---------- 其余按字符串处理 ----------
    return "'" + v.replace("'", "''") + "'"



    from typing import List

def generate_insert_sql(
    table_name: str,
    raw_text: str,
    extra_flag: str = "Y",
    eff_date: str = "2024-01-01",
    created_by: str = "SYSTEM",
) -> str:
    add_extra = (extra_flag.strip().upper() == "Y")
    raw_text = raw_text.strip()
    if not raw_text:
        raise ValueError("raw_text 为空，可能没有正确复制数据")

    # 拆行 + 去除前置空行
    rows: List[List[str]] = [r.split("\t") for r in raw_text.splitlines()]
    while rows and not any(c.strip() for c in rows[0]):
        rows.pop(0)
    if not rows:
        raise ValueError("未检测到列名行")

    base_cols = [c.strip() for c in rows[0]]
    data_rows = rows[1:]

    # 组装 VALUES
    values = []
    for row in data_rows:
        if not any(cell.strip() for cell in row):
            continue  # 跳过全空行
        # 补齐缺失列
        row = row + [""] * (len(base_cols) - len(row))
        fmt_row = [
            _fmt_cell(cell, col_name) for col_name, cell in zip(base_cols, row)
        ]
        if add_extra:
            fmt_row += [f"'{eff_date}'", f"'{created_by}'"]
        values.append("  (" + ", ".join(fmt_row) + ")")

    if not values:
        raise ValueError("没有可插入的数据行")

    all_cols = base_cols + (
        ["record_effective_datetime", "record_created_by"] if add_extra else []
    )
    return (
        f"INSERT INTO {table_name} ({', '.join(all_cols)}) VALUES\n"
        + ",\n".join(values)
        + ";"
    )




sample = """Date	ID	birthday	efect_date	Day	In	Out
01-Oct-22	10001020 	19980302 	19900402 	Sat		
02-Oct-22	10204020 	20051201 	20010705 	Sun		
03-Oct-22	19550304 	19940418 	19980529 	Mon	9:00	18:00"""

print(generate_insert_sql("demo", sample, extra_flag="N"))

print(generate_insert_sql("demo", sample, extra_flag="Y"))











# 示例使用
if __name__ == "__main__":
    input_text = """
    DELETE_FLAG EMPLR_ACCT_CD STATUS_CD ORIG_EMPLR_CD
    N 6600449990 ACTIVE 
    N 6600449991 ACTIVE 
    N 6600449992 ACTIVE 
    N 6600449993 ACTIVE 
    N 6600449994 ACTIVE 315968
    N 6600449995 ACTIVE 321424
    N 6600449996 ACTIVE 327393
    Y 6600449997 ACTIVE 
    N 6600449998 ACTIVE 
    N 6600449999 ACTIVE 
    N 6600450000 ACTIVE 
    N 6600450001 ACTIVE 
    """

    table_name = "tb_employer_account"
    sql_query = generate_sorted_sql_query(table_name, input_text)
    print(sql_query)


