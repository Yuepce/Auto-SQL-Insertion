import re
import pandas as pd

def parse_test_cases(text: str, columns: list) -> pd.DataFrame:
    """
    Parse test cases from markdown-style or plain text into a DataFrame.
    
    Args:
        text (str): Raw input test case text.
        columns (list): List of column headers to extract, e.g. ["Test Case ID", "Rule Reference", "Interpretation", "Expected Result"]

    Returns:
        pd.DataFrame: Structured data with one row per test case.
    """
    # Normalize line breaks and remove leading/trailing whitespace
    text = text.replace('\r\n', '\n').strip()

    # Combine all patterns for start of each test case based on Test Case ID
    test_case_pattern = re.compile(r'(?:\*\*)?Test Case ID(?:\*\*)?:\s*(.+?)\s*(?=\n(?:\*\*)?Test Case ID(?:\*\*)?:|\Z)', re.DOTALL)

    all_matches = test_case_pattern.findall(text)
    raw_blocks = test_case_pattern.finditer(text)

    rows = []
    for match in raw_blocks:
        block = match.group(0)
        row_data = {}
        for col in columns:
            # Flexible regex to match plain or markdown bolded field names
            col_pattern = re.compile(
                rf'(?:\*\*)?{re.escape(col)}(?:\*\*)?:\s*(.+?)(?=\n(?:\s*(?:\*\*)?[A-Z][^:]*?(?:\*\*)?:|\Z))',
                re.DOTALL
            )
            col_match = col_pattern.search(block)
            if col_match:
                value = col_match.group(1).strip()
                row_data[col] = value
            else:
                row_data[col] = ""
        rows.append(row_data)

    df = pd.DataFrame(rows)
    return df


# 示例纯文本（支持粘贴 Markdown 粗体或普通字段名）
raw_text = """
**Test Case ID**: GOV_Term_P01  
**Rule Reference**: Rule #1.1  
**Interpretation**:  
- Must be TERMD  
**Expected Result**: Member included  

Test Case ID: GOV_Term_P02
Rule Reference: Rule #3.2
Interpretation:
- Use latest balance record
Expected Result: Redemption correct
"""

columns = ["Test Case ID", "Rule Reference", "Interpretation", "Expected Result"]

df = parse_test_cases(raw_text, columns)
print(df)
