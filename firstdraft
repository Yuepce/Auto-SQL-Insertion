import csv
import re
from io import StringIO

def generate_sql_with_explicit_nulls_fixed(table_name, input_text, where_cols):
    """
    构建 SQL：SELECT 所有字段；WHERE 使用手动指定字段并处理 NULL，防止错位。
    """

    # Step 1: 替换多空格为 \t（适配 Excel 粘贴）
    input_text = input_text.strip().replace('\xa0', ' ')
    input_text = '\n'.join([
        re.sub(r' {2,}', '\t', line.strip())
        for line in input_text.strip().splitlines()
    ])

    reader = csv.reader(StringIO(input_text), delimiter='\t')
    rows = list(reader)
    if not rows:
        return "-- No data provided"

    # Step 2: 获取字段名
    all_columns = [col.strip() for col in rows[0]]
    data_rows = rows[1:]

    # Step 3: 验证 WHERE 列名存在性
    missing_cols = [col for col in where_cols if col not in all_columns]
    if missing_cols:
        return f"-- Error: These WHERE columns are missing from header: {missing_cols}"

    where_indices = [all_columns.index(col) for col in where_cols]

    # Step 4: 处理数据行（保留字段数量一致，确保列不乱）
    valid_rows = []
    for row in data_rows:
        row = [cell.strip() for cell in row]
        # 补齐或截断字段数
        if len(row) < len(all_columns):
            row += [''] * (len(all_columns) - len(row))
        else:
            row = row[:len(all_columns)]
        # 跳过整行空值
        if all(cell == '' for cell in row):
            continue
        valid_rows.append(row)

    # Step 5: 构建 WHERE 条件（每行一个 AND 表达式，支持 IS NULL）
    where_clauses = []
    for row in valid_rows:
        clause_parts = []
        for idx, col in zip(where_indices, where_cols):
            val = row[idx]
            clause_parts.append(f"{col} IS NULL" if val == '' else f"{col} = '{val}'")
        where_clauses.append("    (" + " AND ".join(clause_parts) + ")")

    # Step 6: 拼接 SQL
    select_clause = ",\n    ".join(all_columns)
    where_clause = "(\n" + "\nOR\n".join(where_clauses) + "\n)" if where_clauses else "1 = 0 -- no valid WHERE clause"

    sql = f"""SELECT
    {select_clause}
FROM {table_name}
WHERE {where_clause};
"""
    return sql


sql = generate_sql_with_explicit_nulls_fixed(
    "ra_rebate_details_funds",
    input_text,
    where_cols=["employer_account_code", "member_account_code"]
)
print(sql)
