下面是你请求的 ✅ 改写版本，它能自动将含 NULL 的条件从 IN (...) 中拆分成 IS NULL 或 = 'xxx' 的 OR 条件表达式，从而确保 PGAdmin 可正确匹配到结果。

⸻

✅ 改写重点：

原功能	修改后行为
WHERE (...) IN ((..., NULL))	❌ 不再使用，会匹配不到
改为：多行 OR (...) 形式	✅ 自动判断值是 NULL 还是非空，生成如：(col1 = 'xxx' AND col2 IS NULL)


⸻

✅ 修改后完整代码如下：

import csv
import re
from io import StringIO

def generate_sql_with_explicit_nulls(table_name, input_text, where_cols):
    """
    构建 SQL：SELECT 所有字段；WHERE 仅使用指定列，并自动将 NULL 拆为 IS NULL。

    参数:
    - table_name (str): SQL 表名
    - input_text (str): 粘贴数据（含列头）
    - where_cols (list[str]): 用于 WHERE 的列名

    返回:
    - str: 完整 SQL 查询语句
    """
    input_text = input_text.strip().replace('\xa0', ' ')
    input_text = '\n'.join([
        re.sub(r' {2,}', '\t', line.strip())
        for line in input_text.strip().splitlines()
    ])

    reader = csv.reader(StringIO(input_text), delimiter='\t')
    rows = list(reader)
    if not rows:
        return "-- No data provided"

    all_columns = [col.strip() for col in rows[0]]
    data_rows = rows[1:]

    # 校验列存在性
    missing = [col for col in where_cols if col not in all_columns]
    if missing:
        return f"-- Error: These WHERE columns are missing from data: {missing}"

    where_indices = [all_columns.index(col) for col in where_cols]

    # 清洗有效行
    valid_rows = []
    for row in data_rows:
        if len(row) < len(all_columns):
            row += [''] * (len(all_columns) - len(row))
        row = row[:len(all_columns)]
        if all(cell.strip() == '' for cell in row):
            continue
        valid_rows.append([cell.strip() for cell in row])

    # 构造 WHERE 条件（每行转成一个 AND 表达式）
    where_clauses = []
    for row in valid_rows:
        clause_parts = []
        for idx, col in zip(where_indices, where_cols):
            val = row[idx].strip()
            if val == '':
                clause_parts.append(f"{col} IS NULL")
            else:
                clause_parts.append(f"{col} = '{val}'")
        where_clauses.append("    (" + " AND ".join(clause_parts) + ")")

    # 构建最终 SQL
    select_clause = ",\n    ".join(all_columns)
    if where_clauses:
        where_block = "\nOR\n".join(where_clauses)
        where_clause = f"(\n{where_block}\n)"
    else:
        where_clause = "1 = 0  -- no valid conditions"

    sql = f"""SELECT
    {select_clause}
FROM {table_name}
WHERE {where_clause};
"""
    return sql


⸻

✅ 示例调用：

sql = generate_sql_with_explicit_nulls(
    "ra_rebate_details_account",
    input_text,
    where_cols=["emplr_acct_cd", "mbr_acct_cd"]
)
print(sql)


⸻

✅ 示例输出 SQL：

SELECT
    emplr_acct_cd,
    mbr_acct_cd,
    ...
FROM ra_rebate_details_account
WHERE (
    (emplr_acct_cd = '20000100' AND mbr_acct_cd IS NULL)
OR  (emplr_acct_cd IS NULL AND mbr_acct_cd = '200100014')
OR  (emplr_acct_cd = '20000105' AND mbr_acct_cd IS NULL)
);


⸻

这样生成的 SQL 能完美适配 PostgreSQL 查询语义 ✅。如果你希望我扩展支持 DISTINCT 或 LIMIT，也可以继续增强。需要吗？
