import pandas as pd
from io import StringIO

def generate_sql_in_query_from_text(raw_text: str, table_name: str) -> str:
    """
    从 Excel 粘贴的文本中提取 employer_account_code 和 member_account_code，
    自动去除.0浮点，生成单条SQL语句，使用 IN (...) 一次性查询所有匹配记录。
    SELECT 后将包含输入数据的所有列名，而不是 *。
    """

    # 内部函数：格式化ID，移除 .0
    def format_id(value):
        if pd.isna(value):
            return None
        if isinstance(value, float) and value.is_integer():
            return str(int(value))
        return str(value).strip()

    # 解析 DataFrame
    df = pd.read_csv(StringIO(raw_text), sep='\t')

    # 构建 SELECT 子句：用所有列名代替 *
    column_list = df.columns.tolist()
    select_clause = ", ".join([f"{col}" for col in column_list])

    # 收集 IN 查询所需的 employer 和 member ID
    employer_ids = set()
    member_ids = set()

    for _, row in df.iterrows():
        emp_id = format_id(row.get("employer_account_code"))
        mem_id = format_id(row.get("member_account_code"))
        if emp_id:
            employer_ids.add(emp_id)
        if mem_id:
            member_ids.add(mem_id)

    # 构造 WHERE 子句
    emp_part = ""
    mem_part = ""

    if employer_ids:
        emp_values = "', '".join(sorted(employer_ids))
        emp_part = f"employer_account_code IN ('{emp_values}')"
    if member_ids:
        mem_values = "', '".join(sorted(member_ids))
        mem_part = f"member_account_code IN ('{mem_values}')"

    if emp_part and mem_part:
        where_clause = f"WHERE {emp_part} OR {mem_part}"
    elif emp_part:
        where_clause = f"WHERE {emp_part}"
    elif mem_part:
        where_clause = f"WHERE {mem_part}"
    else:
        return "-- No valid employer or member account codes found."

    # 拼接完整 SQL 查询
    sql = f"SELECT {select_clause} FROM {table_name} {where_clause};"
    return sql

