import pandas as pd
from io import StringIO

def generate_sql_in_query_from_text(raw_text: str, table_name: str) -> str:
    """
    从 Excel 粘贴的文本中提取 employer_account_code 和 member_account_code，
    自动去除.0浮点，生成格式化的单条 SQL 查询，使用 IN (...) 一次性查询所有匹配记录。
    SELECT 使用输入数据的全量列名，输出语句带 SQL 标准缩进。
    """

    def format_id(value):
        if pd.isna(value):
            return None
        if isinstance(value, float) and value.is_integer():
            return str(int(value))
        return str(value).strip()

    # 读取复制的 Excel 文本
    df = pd.read_csv(StringIO(raw_text), sep='\t')

    # 构造 SELECT 字段列表
    column_list = df.columns.tolist()
    select_clause = ",\n    ".join(column_list)

    # 收集 ID
    employer_ids = set()
    member_ids = set()

    for _, row in df.iterrows():
        emp_id = format_id(row.get("employer_account_code"))
        mem_id = format_id(row.get("member_account_code"))
        if emp_id:
            employer_ids.add(emp_id)
        if mem_id:
            member_ids.add(mem_id)

    # 构造 WHERE 子句
    emp_part = ""
    mem_part = ""
    
    if employer_ids:
        emp_values = "', '".join(sorted(employer_ids))
        emp_part = f"employer_account_code IN (\n        '{emp_values}'\n    )"
    if member_ids:
        mem_values = "', '".join(sorted(member_ids))
        mem_part = f"member_account_code IN (\n        '{mem_values}'\n    )"

    if emp_part and mem_part:
        where_clause = f"WHERE {emp_part}\n    OR {mem_part}"
    elif emp_part:
        where_clause = f"WHERE {emp_part}"
    elif mem_part:
        where_clause = f"WHERE {mem_part}"
    else:
        return "-- No valid employer or member account codes found."

    # 拼接完整 SQL
    sql = f"""SELECT
    {select_clause}
FROM {table_name}
{where_clause};
"""
    return sql
