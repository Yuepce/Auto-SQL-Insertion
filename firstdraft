明白了 ✅

⸻

✅ 你的新需求总结如下：

项目	说明
SELECT 子句	保留输入数据中的所有字段 ✅
WHERE 子句	只使用手动指定的字段构建 (col1, col2, ...) IN (...) ✅
自动跳过 NULL	如果某一行在 WHERE 列中有任意 NULL，则整行 不包含在 WHERE 子句中 ✅
整行空值跳过	自动忽略全空的行 ✅
支持 Excel 粘贴	自动将多空格转换为制表符 \t ✅


⸻

✅ 最终代码如下：

import csv
import re
from io import StringIO

def generate_sql_with_partial_where(table_name, input_text, where_cols):
    """
    构建 SQL：SELECT 所有字段，WHERE 仅使用指定列，且过滤掉包含 NULL 的 WHERE 元组。

    参数:
    - table_name (str): SQL 表名
    - input_text (str): Excel 粘贴数据（含列头）
    - where_cols (list[str]): 手动指定用于 WHERE 的列名（必须在列中）

    返回:
    - str: 格式化后的 SQL 查询语句
    """
    # 清洗格式
    input_text = input_text.strip().replace('\xa0', ' ')
    input_text = '\n'.join([
        re.sub(r' {2,}', '\t', line.strip())
        for line in input_text.strip().splitlines()
    ])
    
    reader = csv.reader(StringIO(input_text), delimiter='\t')
    rows = list(reader)
    if not rows:
        return "-- No data provided"

    # 获取全部列名
    all_columns = [col.strip() for col in rows[0]]
    data_rows = rows[1:]

    # 验证 WHERE 字段是否存在
    missing = [col for col in where_cols if col not in all_columns]
    if missing:
        return f"-- Error: These WHERE columns are missing from data: {missing}"

    where_indices = [all_columns.index(col) for col in where_cols]

    # 净化数据：跳过空行，补齐字段
    valid_rows = []
    for row in data_rows:
        if len(row) < len(all_columns):
            row += [''] * (len(all_columns) - len(row))
        row = row[:len(all_columns)]
        if all(cell.strip() == '' for cell in row):
            continue
        valid_rows.append([cell.strip() for cell in row])

    # 构造 WHERE 元组（跳过任何包含 NULL 的元组）
    where_values = []
    for row in valid_rows:
        values = []
        null_found = False
        for idx in where_indices:
            val = row[idx]
            if val == '':
                null_found = True
                break
            values.append(f"'{val}'")
        if not null_found:
            where_values.append(f"    ({', '.join(values)})")

    # 输出所有列作为 SELECT
    select_clause = ",\n    ".join(all_columns)
    where_clause = f"({', '.join(where_cols)}) IN (\n{',\n'.join(where_values)}\n)" if where_values else "-- WHERE skipped due to all NULLs"

    # 拼接 SQL
    sql = f"""SELECT
    {select_clause}
FROM {table_name}
WHERE {where_clause};
""" if where_values else f"""SELECT
    {select_clause}
FROM {table_name};
/* All rows skipped due to NULLs in WHERE columns */"""

    return sql


⸻

✅ 示例调用方式：

sql = generate_sql_with_partial_where(
    "ra_rebate_details_account",
    input_text,
    where_cols=["emplr_acct_cd", "mbr_acct_cd"]
)
print(sql)


⸻

✅ 示例输出（只包含 WHERE 中无 NULL 的行）：

SELECT
    scheme_code,
    account_type,
    emplr_acct_cd,
    mbr_acct_cd,
    ...
FROM ra_rebate_details_account
WHERE (emplr_acct_cd, mbr_acct_cd) IN (
    ('20000104', '200100014'),
    ('20000105', '200100015')
);

如果所有行都因 NULL 被过滤，则自动生成：

SELECT
    ...
FROM ra_rebate_details_account;
/* All rows skipped due to NULLs in WHERE columns */


⸻

是否还希望加入 DISTINCT、输出 .sql 文件、或导出符合 WHERE 的原始数据行？我可以继续为你扩展。
